/**
 * üåê SUPABASE CLIENT SINGLETON - PADR√ÉO OFICIAL TIPADO
 * 
 * Implementa√ß√£o seguindo exatamente as pr√°ticas recomendadas:
 * https://supabase.com/docs/guides/getting-started/quickstarts/reactjs
 * 
 * ‚ö†Ô∏è SINGLETON PATTERN para evitar m√∫ltiplas inst√¢ncias do GoTrueClient
 */

import { createClient as createSupabaseClient } from '@supabase/supabase-js';
import { env } from '../env';
import type { Database } from '../../types/supabase';

const supabaseUrl = env.SUPABASE_URL;
const publicAnonKey = env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !publicAnonKey) {
  console.error('üîß Supabase Client - Vari√°veis de ambiente faltando:', { supabaseUrl, publicAnonKey });
  throw new Error('Missing Supabase environment variables');
}

// ‚úÖ SINGLETON PATTERN - Garante uma √∫nica inst√¢ncia
let supabaseInstance: ReturnType<typeof createSupabaseClient<Database>> | null = null;

function getSupabaseClient() {
  if (supabaseInstance) {
    return supabaseInstance;
  }

  // Criar inst√¢ncia √∫nica do cliente
  supabaseInstance = createSupabaseClient<Database>(supabaseUrl, publicAnonKey, {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false,
      flowType: 'pkce'
    }
  });

  return supabaseInstance;
}

// ‚úÖ EXPORT DA INST√ÇNCIA SINGLETON
export const supabase = getSupabaseClient();

// Export function for creating additional clients if needed (e.g., for testing)
export const createClient = getSupabaseClient;

// Export do client para compatibilidade
export default supabase;